@page "/add"
@page "/edit/{Id:int}"

@using EmployeeManagement.Models
@using EmployeeManagement.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation


<h3>@(IsEdit ? "Edit" : "Add") Employee</h3>

<EditForm Model="employee" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name</label>
        <InputText class="form-control" @bind-value="employee.FirstName" />
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <InputText class="form-control" @bind-value="employee.LastName" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-value="employee.Email" />
    </div>
    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-value="employee.DateOfBirth" />
    </div>
    <div class="form-group">
        <label>Position</label>
        <InputText class="form-control" @bind-value="employee.Position" />
    </div>
    <div class="form-group">
        <label>Salary</label>
        <InputNumber class="form-control" @bind-value="employee.Salary" />
    </div>

    <button class="btn btn-success mt-2" type="submit">@submitButtonText</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private EmployeeDto employee = new();
    private string submitButtonText => IsEdit ? "Update" : "Add";
    private bool IsEdit => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var id = Id ?? 0; // fallback in case nullable
            var existing = await EmployeeService.GetByIdAsync(Id.Value);
            if (existing != null)
            {
                employee = existing;
            }
        }
    }

    private async Task HandleSubmit()
    {
        bool success;

        if (IsEdit)
            success = await EmployeeService.UpdateAsync(employee);
        else
            success = await EmployeeService.AddAsync(employee);

        if (success)
        {
            Navigation.NavigateTo("/employees");
        }
    }
}